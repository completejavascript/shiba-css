/**
* Grid
*/

// Generate column info in each break-point: xs, sm, md, lg, xl
@mixin gen-column-width($type) {
  @for $i from 1 through $grid-columns {
    .col-#{$type}-#{$i} {
      width: (100% / $grid-columns) * $i;
    }
  }
}

// Set value of .container's width
@mixin set-width($className, $value, $ratio) {
  .#{$className} {
    width: $value * $ratio;
  }
}

.container-full, .container, .container-small {
  width: 100%;
  max-width: 100%;
  padding: $grid-container-padding;
  margin-left: auto;
  margin-right: auto;
}

.row::after {
  content: "";
  clear: both;
  display: table;
}

[class*="col-"] {
  float: left;
  padding: $grid-column-padding;
}

@include gen-column-width(xs);

@include sm-breakpoint {
  @include gen-column-width(sm);
  @include set-width("container", 100%, $grid-container-ratio);
  @include set-width("container-small", 100%, $grid-container-small-ratio);
}

@include md-breakpoint {
  @include gen-column-width(md);
  @include set-width("container", $md, $grid-container-ratio);
  @include set-width("container-small", $md, $grid-container-small-ratio);
}

@include lg-breakpoint {
  @include gen-column-width(lg);
  @include set-width("container", $lg, $grid-container-ratio);
  @include set-width("container-small", $lg, $grid-container-small-ratio);
}

@include xl-breakpoint {
  @include gen-column-width(xl);
  @include set-width("container", $xl, $grid-container-ratio);
  @include set-width("container-small", $xl, $grid-container-small-ratio);
}